package com.example.blog;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import org.springframework.web.multipart.MultipartFile;


@Controller // This means that this class is a Controller
@RequestMapping(path="/app") // This means URL's start with /app (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BlogRepository blogRepository;
    @Autowired
    private TagRepository tagRepository;

    @PostMapping(path="/add_tag")
    public @ResponseBody String addNewTag (@RequestParam String tag){
        Tag n = new Tag();
        n.setTag(tag);
        tagRepository.save(n);
        return "Saved";

    }
    @PostMapping(path="/delete_tag")
    public @ResponseBody String deleteTag (@RequestParam String tag){
        tagRepository.deleteTag(tag);
        return "Deleted";

    }
    @GetMapping(path="/all_tags")
    public @ResponseBody Iterable<Tag> getAllTags() {
        // This returns a JSON or XML with the tags

        return tagRepository.findAll();
    }

    @PostMapping(path="/add_blog") // Map ONLY POST Requests
    public @ResponseBody String addNewBlog (@RequestParam String description, @RequestParam String textContent,
                                            @RequestParam String tag, @RequestParam(defaultValue = "0") Integer likesNum,
                                            @RequestParam(required = false) MultipartFile file) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Blog n = new Blog();
        try {
            n.setImage(file.getBytes());
        } catch (Exception e) {
            byte[] empty = {};
            n.setImage(empty);
        }

        n.setDescription(description);
        n.setTextContent(textContent);
        n.setTag(tag);
        n.setLikesNum(likesNum);
        blogRepository.save(n);
        return "Saved";
    }

    @PostMapping(path="/update_likes") // Map ONLY POST Requests
    public @ResponseBody String updateLikes (@RequestParam Integer id, @RequestParam Integer likesNum) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        blogRepository.updateLikesNum(id, likesNum);
        return "Updated";
    }
    @PostMapping(path="/delete_blog") // Map ONLY POST Requests
    public @ResponseBody String deleteBlog (@RequestParam Integer id) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        blogRepository.deleteBlog(id);
        return "Deleted";
    }
    @GetMapping(path="/all_blogs")
    public @ResponseBody Iterable<Blog> getAllBlogs() {
        // This returns a JSON or XML with the blogs

        return blogRepository.findAll();
    }
    @GetMapping(path="/spec_blogs")
    public @ResponseBody Iterable<Blog> getSpecifiedBlogs(@RequestParam String tag) {
        // This returns a JSON or XML with the blogs
        return blogRepository.findBlogsWithTag(tag);
    }

    public MainController() {
    }

    @GetMapping("/test")
    public String getTest(){
        return "You made it!";
    }

}
