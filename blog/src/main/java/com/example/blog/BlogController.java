package com.example.blog;

import org.springframework.web.bind.annotation.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

@RestController // This means that this class is a Controller
@RequestMapping(path="/app") // This means URL's start with /app (after Application path)
public class BlogController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BlogRepository blogRepository;

    @Autowired
    protected BlogService blogService;

    @PostMapping(path="/blog") // Map ONLY POST Requests
    public @ResponseBody String addNewBlog (@RequestParam String description, @RequestParam String textContent,
                                            @RequestParam String tag, @RequestParam(defaultValue = "0") Integer likesNum,
                                            @RequestParam(required = false) MultipartFile file) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        System.out.println(file);
        Blog n = blogService.createBlog(description, textContent,
                 tag, likesNum, file);
        blogRepository.save(n);
        return "Saved";
    }

    @PostMapping(path="/update_likes") // Map ONLY POST Requests
    public @ResponseBody String updateLikes (@RequestParam Integer id, @RequestParam Integer likesNum) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        blogRepository.updateLikesNum(id, likesNum);
        return "Updated";
    }
    @DeleteMapping(path="/blog") // Map ONLY POST Requests
    public @ResponseBody String deleteBlog (@RequestParam Integer id) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        blogRepository.deleteById(id);
        return "Deleted";
    }
    @GetMapping(path="/blogs")
    public @ResponseBody Iterable<Blog> getAllBlogs() {
        // This returns a JSON or XML with the blogs

        return blogRepository.findAll();
    }

    @GetMapping(path="/page_blog")
    public @ResponseBody Iterable<Blog> SelectBlogs(@RequestParam Integer start,
    @RequestParam Integer end) {
        // This returns a JSON or XML with the blogs
        List<Blog> blogList = (List<Blog>) blogRepository.findAll();
        Stream<Blog> stream = blogList.stream();
        return (Iterable<Blog>) stream.skip(start - 1).limit(end - start + 1)::iterator;
        //return blogRepository.findAll();
    }

    @GetMapping(path="/blogs_num")
    public @ResponseBody long getBlogsNum() {
        // This returns a JSON or XML with the blogs

        return blogRepository.findAll().spliterator().getExactSizeIfKnown();
    }

    @GetMapping(path="/blog")
    public @ResponseBody Optional<Blog> getBlog(@RequestParam Integer id) {
        // This returns a JSON or XML with the blogs

        return blogRepository.findById(id);
    }

    @GetMapping(path="/spec_blogs")
    public @ResponseBody Iterable<Blog> getSpecifiedBlogs(@RequestParam String tag) {
        // This returns a JSON or XML with the blogs
        return blogRepository.findBlogsWithTag(tag);
    }

    public BlogController() {
    }
}
